#!/bin/bash

# Switch the default audio sink and move existing streams to new sink
# Copyright (C) 2020, Jacob Still github.com/jcstill
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see https://www.gnu.org/licenses/

usage() {
	printf "usage: audiosink [OPTION] [arguments...]\n\n"
	printf "Options:\n"
	printf "  volup,voldn                   Turn volume up/down by 2% on the default sink\n"
	printf "  vol <PERCENT>                 Set the volume to PERCENT\n"
	printf "  current                       Show the current sink\n"
	printf "  listall,list                  Show all avaliable sinks\n"
	printf "  <SINKNAME>                    Change the default sink and move active streams to SINKNAME\n\n"
	printf "Examples:\n"
	printf "  audiosink internal            - Set the currnet sink to \"internal\"\n"
	exit
}

if [ -z "$1" ] || [ "$1" == "-h" ] || [ "$1" == "--help" ];then
	usage
elif [ "$1" == "volup" ] || [ "$1" == "voldn" ] || [ "$1" == "vol" ];then
	CURVOL="$(amixer -c 1 -M -D pulse get Master|tail -1|awk '{print $5;}'|cut -c 2-|rev|cut -c 3-|rev )" # have to use "rev" since volume percent character length changes
	if [ "$1" == "volup" ]; then
		if [ "$CURVOL" -lt "100" ]; then
			pactl set-sink-volume @DEFAULT_SINK@ +2%
		fi
	elif [ "$1" == "voldn" ]; then
		if [ "$CURVOL" -gt "0" ]; then
			pactl set-sink-volume @DEFAULT_SINK@ -2%
		fi
	elif [ "$1" == "vol" ];then
		pactl set-sink-volume @DEFAULT_SINK@ $2%
	fi
	exit
fi

# Find all the sink data
INTERNAL="$(pacmd list-sinks|grep name:|grep alsa_output.pci-0000_00_1f.3.analog-stereo|awk '{print $2;}'|sed 's|[<>,]||g')"
K3="$(pacmd list-sinks|grep name:|grep alsa_output.usb-FiiO_K3-00.analog-stereo|awk '{print $2;}'|sed 's|[<>,]||g')"
KVM="$(pacmd list-sinks|grep name:|grep alsa_output.usb-VIA_Technologies_Inc._USB_Audio_Device-00.iec958-stereo|awk '{print $2;}'|sed 's|[<>,]||g')"
HDMITV="$(pacmd list-sinks|grep name:|grep alsa_output.pci-0000_01_00.1.hdmi-stereo-extra2|awk '{print $2;}'|sed 's|[<>,]||g')"
HDMIPC="$(pacmd list-sinks|grep name:|grep alsa_output.pci-0000_01_00.1.hdmi-stereo-extra4|awk '{print $2;}'|sed 's|[<>,]||g')"
CURRENT="$(pacmd list-sinks|grep 'index:\|name:'|grep '*' -A 1|tail -1|awk '{print $2;}'|sed 's|[<>,]||g')"

if [ "$1" == "current" ]; then
	printf "$CURRENT\n"
	exit 0
elif [ "$1" == "listall" ] || [ "$1" == "list" ]; then
	printf " k3       - $K3\n"
	printf " internal - $INTERNAL\n"
	printf " kvm      - $KVM\n"
	printf " hdmi     - "
	if [ -n "$HDMITV" ] && [ "$HDMITV" != "" ]; then
		printf "$HDMITV\n"
	elif [ -n "$HDMIPC" ] && [ "$HDMIPC" != "" ]; then
		printf "$HDMIPC\n"
	fi
	exit 0
fi

# Code to handle USB relay for speakers' power
if [ ! -f ~/.config/audiosink/config ];then
	printf " " > ~/.config/audiosink/config
fi
TTYUSB="$(cat ~/.config/audiosink/config|grep USB|cut -c5-)"
if [ -z "$TTYUSB" ];then
	TTYUSB="$(dmesg|grep ch341-uart|grep "attached\|disconnected"|tail -1|grep attached|rev|awk '{print $1 "/ved/"}'|rev)"
	if [ ! -z "$TTYUSB" ];then
		printf "# This file is auto generated by audiosink\nUSB=$TTYUSB\n" > ~/.config/audiosink/config
	else
		printf "relay device not found\n"
	fi
fi

# Set default sink accordingly
if [ "$1" == "k3" ]; then
	if [ ! -z "$TTYUSB" ];then
		printf "0" > $TTYUSB
	fi
	if [ -z "$K3" ]; then
		printf "$K3 not found\n"
		printf "Setting to internal\n"
		pactl set-default-sink $INTERNAL
	else
		printf "Setting to K3\n"
		pactl set-default-sink $K3
	fi
elif [ "$1" == "kvm" ]; then
	if [ ! -z "$TTYUSB" ];then
		printf "0" > $TTYUSB
	fi
	if [ -z "$KVM" ]; then
		printf "$KVM not found\n"
		printf "Setting to internal\n"
		pactl set-default-sink $INTERNAL
	else
		printf "Setting to KVM\n"
		pactl set-default-sink $KVM
	fi
elif [ "$1" == "hdmi" ]; then
	if [ ! -z "$TTYUSB" ];then
		printf "0" > $TTYUSB
	fi
	if [ -n "$HDMITV" ] && [ "$HDMITV" != "" ]; then
		printf "Setting to TV HDMI\n"
		pactl set-default-sink $HDMITV
	elif [ -n "$HDMIPC" ] && [ "$HDMIPC" != "" ]; then
		printf "Setting to PC HDMI\n"
		pactl set-default-sink $HDMIPC
	else
		printf "No HDMI found\n"
		printf "Setting to internal\n"
		pactl set-default-sink $INTERNAL
	fi
elif [ "$1" == "internal" ] || [ "$1" == "maudio" ] || [ "$1" == "bigred" ]; then
	if [ ! -z "$TTYUSB" ] && [ ! -w $TTYUSB ];then
		printf "You need to have write permission to $TTYUSB!\n"
		sudo chmod 666 $TTYUSB
	fi
	printf "Setting to INTERNAL\n"
	screen -d -m -S relay $TTYUSB
	sleep 1
	screen -X -S "relay" quit
	sleep 1
	printf "1" > $TTYUSB
	sleep 3
	pactl set-default-sink $INTERNAL
	pactl set-sink-volume @DEFAULT_SINK@ 50%
else
	printf "$1 not a valid sink\n\n"
	usage
fi

# Move active audio streams
if [ -z "$2" ]; then
	pactl list short sink-inputs|while read stream; do
		SID=$(echo $stream|cut '-d ' -f1)
		NUMBER="$(echo $SID|awk '{print $1}')"
		NAME="$(pactl list sink-inputs|grep "Sink Input\|application.name"|tr '\n\r#"' ' '|awk '{print $3 ": " $6}'|grep $NUMBER)"
		printf "moving $NAME\n"
		pactl move-sink-input "$SID" "@DEFAULT_SINK@"
	done
fi


# Test code to show name of audio stream's application
#	pactl list sink-inputs|grep "Sink Input\|application.name"|tr '\n\r#"' ' '|awk '{print $3 ": " $6}'|while read stream;do
#		SID="$(echo $stream|awk '{print $1}'|tr -d ':')"
#		echo "moving stream $stream"
#		pactl move-sink-input "$SID" "@DEFAULT_SINK@"
#	done
